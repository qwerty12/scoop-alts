{
    "version": "1.64.1b9z",
    "description": "A mangling of uBlock Origin suitable for me to load into ephemeral headless Chromium instances.",
    "homepage": "https://github.com/gorhill/uBlock",
    "license": "GPL-3.0-or-later",
    "url": "https://github.com/gorhill/uBlock/releases/download/1.64.1b9/uBlock0_1.64.1b9.chromium.zip",
    "hash": "d5f163bc1eb9a05256e9bad03407f07c723625923debbc82c4f8a54b509da328",
    "post_install": [
        "# https://stackoverflow.com/a/55384556",
        "function Format-Json([Parameter(Mandatory, ValueFromPipeline)][String] $json, [bool] $UseTabs) {",
        "    $indentChar = if ($UseTabs) {\"`t\"} else {'  '}",
        "    $indent = 0;",
        "    ($json -Split '\\r?\\n' | ForEach-Object {",
        "        if ($_ -match '[\\}\\]]\\s*,?\\s*$') { $indent-- }",
        "        $line = ($indentChar * $indent) + $($_.TrimStart() -replace '\":  ([\"{[])', '\": $1' -replace ':  ', ': ')",
        "        if ($_ -match '[\\{\\[]\\s*$') { $indent++ }",
        "        $line",
        "    }) -Join \"`n\"",
        "}",
        "# https://stackoverflow.com/a/47779605",
        "function Convert-UnicodeEscapes([Parameter(Mandatory, ValueFromPipeline)][String] $json) {",
        "    [Regex]::Replace($json, '\\\\u(?<Value>[a-zA-Z0-9]{4})', { param($m) ([char]([int]::Parse($m.Groups['Value'].Value, [System.Globalization.NumberStyles]::HexNumber))).ToString() })",
        "}",
        "$utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)",
        "$uboRootDir = Join-Path -Path $original_dir -ChildPath 'uBlock0.chromium'",
        "try {",
        "    $dest = Join-Path -Path $uboRootDir -ChildPath 'js\\background.js'",
        "    $data = Get-Content $dest -Encoding UTF8 -Raw",
        "    $data = $data -replace [regex]::Escape('autoUpdate: true'), 'autoUpdate: false'",
        "    $old = 'const hostnameSwitchesDefault = ['",
        "    $new = $old + '''no-csp-reports: * true'',''no-remote-fonts: * true'','",
        "    if ($data -notmatch [regex]::Escape($new)) {",
        "        $data = $data -replace [regex]::Escape($old), $new",
        "    }",
        "    [System.IO.File]::WriteAllText($dest, $data, $utf8NoBomEncoding)",
        "} catch {}",
        "try {",
        "    $assetsDir = Join-Path -Path $uboRootDir -ChildPath 'assets'",
        "    $devAssetPath = Join-Path -Path $assetsDir -ChildPath 'assets.dev.json'",
        "    $dest = if (Test-Path $devAssetPath) { $devAssetPath } else { Join-Path -Path $assetsDir -ChildPath 'assets.json' }",
        "    $data = ConvertFrom-Json -InputObject (Get-Content $dest -Encoding UTF8 -Raw)",
        "    foreach ($key in @('block-lan', 'fanboy-social', 'fanboy-thirdparty_social')) {",
        "        if (-not ($data.$key)) { continue }",
        "        $data.$key.PSObject.Properties.Remove('off')",
        "        try {",
        "            $contentURL = @($data.$key.contentURL)",
        "            $urls = $contentURL",
        "            if ($data.$key.cdnURLs) {",
        "                $validFilenames = $contentURL | ForEach-Object { Split-Path $_ -Leaf } | Select-Object -Unique",
        "                $matchingCdnUrls = $data.$key.cdnURLs | Where-Object { $validFilenames -contains (Split-Path $_ -Leaf) }",
        "                if ($matchingCdnUrls) {",
        "                    $urls += $matchingCdnUrls",
        "                }",
        "                $urls = $urls | Select-Object -Unique",
        "            }",
        "            foreach ($url in $urls) {",
        "                $prevProgressPreference = $global:ProgressPreference",
        "                $global:ProgressPreference = 'SilentlyContinue'",
        "                try {",
        "                    $filename = Split-Path $url -Leaf",
        "                    $destFile = Join-Path -Path $assetsDir -ChildPath $filename",
        "                    $destRelativeURL = \"assets/$($filename)\"",
        "                    if (-not (Test-Path $destFile)) {",
        "                        Invoke-WebRequest -Uri $url -OutFile $destFile -UseBasicParsing -TimeoutSec 30 -MaximumRedirection 0 -Method Get -Headers @{'Accept-Encoding'='gzip'} -ErrorAction Stop",
        "                    }",
        "                    if (-not ($contentURL -contains $destRelativeURL) -and (Test-Path $destFile)) {",
        "                        $contentURL = $contentURL + @($destRelativeURL)",
        "                    }",
        "                } catch {}",
        "                finally { $global:ProgressPreference = $prevProgressPreference }",
        "            }",
        "            if ($contentURL.Length -gt 1) {",
        "                $data.$key.contentURL = $contentURL",
        "            }",
        "        } catch {}",
        "    }",
        "    $finalJson = $data | ConvertTo-Json -Depth 100 -Compress:$false | Convert-UnicodeEscapes | Format-Json -UseTabs:$true",
        "    [System.IO.File]::WriteAllText($dest, $finalJson, $utf8NoBomEncoding)",
        "} catch {}"
    ],
    "checkver": {
        "url": "https://api.github.com/repos/gorhill/uBlock/releases?per_page=1",
        "jsonpath": "$[0].tag_name",
        "regex": "([\\w\\.]+)",
        "replace": "${1}z"
    },
    "autoupdate": {
        "url": "https://github.com/gorhill/uBlock/releases/download/$match1/uBlock0_$match1.chromium.zip"
    }
}
